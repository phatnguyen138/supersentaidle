//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Character = newCharacterTable("public", "character", "")

type characterTable struct {
	postgres.Table

	// Columns
	ID               postgres.ColumnInteger
	SeriesID         postgres.ColumnInteger
	Name             postgres.ColumnString
	RangerColor      postgres.ColumnString
	Role             postgres.ColumnString
	CivilianIdentity postgres.ColumnString
	SignatureMove    postgres.ColumnString
	ImageURL         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CharacterTable struct {
	characterTable

	EXCLUDED characterTable
}

// AS creates new CharacterTable with assigned alias
func (a CharacterTable) AS(alias string) *CharacterTable {
	return newCharacterTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterTable with assigned schema name
func (a CharacterTable) FromSchema(schemaName string) *CharacterTable {
	return newCharacterTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterTable with assigned table prefix
func (a CharacterTable) WithPrefix(prefix string) *CharacterTable {
	return newCharacterTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterTable with assigned table suffix
func (a CharacterTable) WithSuffix(suffix string) *CharacterTable {
	return newCharacterTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterTable(schemaName, tableName, alias string) *CharacterTable {
	return &CharacterTable{
		characterTable: newCharacterTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newCharacterTableImpl("", "excluded", ""),
	}
}

func newCharacterTableImpl(schemaName, tableName, alias string) characterTable {
	var (
		IDColumn               = postgres.IntegerColumn("id")
		SeriesIDColumn         = postgres.IntegerColumn("series_id")
		NameColumn             = postgres.StringColumn("name")
		RangerColorColumn      = postgres.StringColumn("ranger_color")
		RoleColumn             = postgres.StringColumn("role")
		CivilianIdentityColumn = postgres.StringColumn("civilian_identity")
		SignatureMoveColumn    = postgres.StringColumn("signature_move")
		ImageURLColumn         = postgres.StringColumn("image_url")
		allColumns             = postgres.ColumnList{IDColumn, SeriesIDColumn, NameColumn, RangerColorColumn, RoleColumn, CivilianIdentityColumn, SignatureMoveColumn, ImageURLColumn}
		mutableColumns         = postgres.ColumnList{SeriesIDColumn, NameColumn, RangerColorColumn, RoleColumn, CivilianIdentityColumn, SignatureMoveColumn, ImageURLColumn}
	)

	return characterTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		SeriesID:         SeriesIDColumn,
		Name:             NameColumn,
		RangerColor:      RangerColorColumn,
		Role:             RoleColumn,
		CivilianIdentity: CivilianIdentityColumn,
		SignatureMove:    SignatureMoveColumn,
		ImageURL:         ImageURLColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
