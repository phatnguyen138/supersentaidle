//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserProgress = newUserProgressTable("public", "user_progress", "")

type userProgressTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	UserID         postgres.ColumnInteger
	ChallengeID    postgres.ColumnInteger
	Attempts       postgres.ColumnInteger
	Completed      postgres.ColumnBool
	CompletionTime postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserProgressTable struct {
	userProgressTable

	EXCLUDED userProgressTable
}

// AS creates new UserProgressTable with assigned alias
func (a UserProgressTable) AS(alias string) *UserProgressTable {
	return newUserProgressTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserProgressTable with assigned schema name
func (a UserProgressTable) FromSchema(schemaName string) *UserProgressTable {
	return newUserProgressTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserProgressTable with assigned table prefix
func (a UserProgressTable) WithPrefix(prefix string) *UserProgressTable {
	return newUserProgressTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserProgressTable with assigned table suffix
func (a UserProgressTable) WithSuffix(suffix string) *UserProgressTable {
	return newUserProgressTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserProgressTable(schemaName, tableName, alias string) *UserProgressTable {
	return &UserProgressTable{
		userProgressTable: newUserProgressTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newUserProgressTableImpl("", "excluded", ""),
	}
}

func newUserProgressTableImpl(schemaName, tableName, alias string) userProgressTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		UserIDColumn         = postgres.IntegerColumn("user_id")
		ChallengeIDColumn    = postgres.IntegerColumn("challenge_id")
		AttemptsColumn       = postgres.IntegerColumn("attempts")
		CompletedColumn      = postgres.BoolColumn("completed")
		CompletionTimeColumn = postgres.TimestampColumn("completion_time")
		allColumns           = postgres.ColumnList{IDColumn, UserIDColumn, ChallengeIDColumn, AttemptsColumn, CompletedColumn, CompletionTimeColumn}
		mutableColumns       = postgres.ColumnList{UserIDColumn, ChallengeIDColumn, AttemptsColumn, CompletedColumn, CompletionTimeColumn}
	)

	return userProgressTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		UserID:         UserIDColumn,
		ChallengeID:    ChallengeIDColumn,
		Attempts:       AttemptsColumn,
		Completed:      CompletedColumn,
		CompletionTime: CompletionTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
