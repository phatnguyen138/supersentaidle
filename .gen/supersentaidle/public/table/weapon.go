//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Weapon = newWeaponTable("public", "weapon", "")

type weaponTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	SeriesID  postgres.ColumnInteger
	Name      postgres.ColumnString
	Type      postgres.ColumnString
	WielderID postgres.ColumnInteger
	ImageURL  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WeaponTable struct {
	weaponTable

	EXCLUDED weaponTable
}

// AS creates new WeaponTable with assigned alias
func (a WeaponTable) AS(alias string) *WeaponTable {
	return newWeaponTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WeaponTable with assigned schema name
func (a WeaponTable) FromSchema(schemaName string) *WeaponTable {
	return newWeaponTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WeaponTable with assigned table prefix
func (a WeaponTable) WithPrefix(prefix string) *WeaponTable {
	return newWeaponTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WeaponTable with assigned table suffix
func (a WeaponTable) WithSuffix(suffix string) *WeaponTable {
	return newWeaponTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWeaponTable(schemaName, tableName, alias string) *WeaponTable {
	return &WeaponTable{
		weaponTable: newWeaponTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newWeaponTableImpl("", "excluded", ""),
	}
}

func newWeaponTableImpl(schemaName, tableName, alias string) weaponTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		SeriesIDColumn  = postgres.IntegerColumn("series_id")
		NameColumn      = postgres.StringColumn("name")
		TypeColumn      = postgres.StringColumn("type")
		WielderIDColumn = postgres.IntegerColumn("wielder_id")
		ImageURLColumn  = postgres.StringColumn("image_url")
		allColumns      = postgres.ColumnList{IDColumn, SeriesIDColumn, NameColumn, TypeColumn, WielderIDColumn, ImageURLColumn}
		mutableColumns  = postgres.ColumnList{SeriesIDColumn, NameColumn, TypeColumn, WielderIDColumn, ImageURLColumn}
	)

	return weaponTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		SeriesID:  SeriesIDColumn,
		Name:      NameColumn,
		Type:      TypeColumn,
		WielderID: WielderIDColumn,
		ImageURL:  ImageURLColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
