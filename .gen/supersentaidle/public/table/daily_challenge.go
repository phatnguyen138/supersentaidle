//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DailyChallenge = newDailyChallengeTable("public", "daily_challenge", "")

type dailyChallengeTable struct {
	postgres.Table

	// Columns
	ID       postgres.ColumnInteger
	Date     postgres.ColumnDate
	Category postgres.ColumnString
	AnswerID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DailyChallengeTable struct {
	dailyChallengeTable

	EXCLUDED dailyChallengeTable
}

// AS creates new DailyChallengeTable with assigned alias
func (a DailyChallengeTable) AS(alias string) *DailyChallengeTable {
	return newDailyChallengeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DailyChallengeTable with assigned schema name
func (a DailyChallengeTable) FromSchema(schemaName string) *DailyChallengeTable {
	return newDailyChallengeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DailyChallengeTable with assigned table prefix
func (a DailyChallengeTable) WithPrefix(prefix string) *DailyChallengeTable {
	return newDailyChallengeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DailyChallengeTable with assigned table suffix
func (a DailyChallengeTable) WithSuffix(suffix string) *DailyChallengeTable {
	return newDailyChallengeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDailyChallengeTable(schemaName, tableName, alias string) *DailyChallengeTable {
	return &DailyChallengeTable{
		dailyChallengeTable: newDailyChallengeTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newDailyChallengeTableImpl("", "excluded", ""),
	}
}

func newDailyChallengeTableImpl(schemaName, tableName, alias string) dailyChallengeTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		DateColumn     = postgres.DateColumn("date")
		CategoryColumn = postgres.StringColumn("category")
		AnswerIDColumn = postgres.IntegerColumn("answer_id")
		allColumns     = postgres.ColumnList{IDColumn, DateColumn, CategoryColumn, AnswerIDColumn}
		mutableColumns = postgres.ColumnList{DateColumn, CategoryColumn, AnswerIDColumn}
	)

	return dailyChallengeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		Date:     DateColumn,
		Category: CategoryColumn,
		AnswerID: AnswerIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
