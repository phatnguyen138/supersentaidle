//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Mecha = newMechaTable("public", "mecha", "")

type mechaTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	SeriesID   postgres.ColumnInteger
	Name       postgres.ColumnString
	Type       postgres.ColumnString
	Components postgres.ColumnString
	ImageURL   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MechaTable struct {
	mechaTable

	EXCLUDED mechaTable
}

// AS creates new MechaTable with assigned alias
func (a MechaTable) AS(alias string) *MechaTable {
	return newMechaTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MechaTable with assigned schema name
func (a MechaTable) FromSchema(schemaName string) *MechaTable {
	return newMechaTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MechaTable with assigned table prefix
func (a MechaTable) WithPrefix(prefix string) *MechaTable {
	return newMechaTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MechaTable with assigned table suffix
func (a MechaTable) WithSuffix(suffix string) *MechaTable {
	return newMechaTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMechaTable(schemaName, tableName, alias string) *MechaTable {
	return &MechaTable{
		mechaTable: newMechaTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newMechaTableImpl("", "excluded", ""),
	}
}

func newMechaTableImpl(schemaName, tableName, alias string) mechaTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		SeriesIDColumn   = postgres.IntegerColumn("series_id")
		NameColumn       = postgres.StringColumn("name")
		TypeColumn       = postgres.StringColumn("type")
		ComponentsColumn = postgres.StringColumn("components")
		ImageURLColumn   = postgres.StringColumn("image_url")
		allColumns       = postgres.ColumnList{IDColumn, SeriesIDColumn, NameColumn, TypeColumn, ComponentsColumn, ImageURLColumn}
		mutableColumns   = postgres.ColumnList{SeriesIDColumn, NameColumn, TypeColumn, ComponentsColumn, ImageURLColumn}
	)

	return mechaTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		SeriesID:   SeriesIDColumn,
		Name:       NameColumn,
		Type:       TypeColumn,
		Components: ComponentsColumn,
		ImageURL:   ImageURLColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
