//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Series = newSeriesTable("public", "series", "")

type seriesTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	Name        postgres.ColumnString
	Year        postgres.ColumnInteger
	Theme       postgres.ColumnString
	ColorScheme postgres.ColumnString
	ImageURL    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SeriesTable struct {
	seriesTable

	EXCLUDED seriesTable
}

// AS creates new SeriesTable with assigned alias
func (a SeriesTable) AS(alias string) *SeriesTable {
	return newSeriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SeriesTable with assigned schema name
func (a SeriesTable) FromSchema(schemaName string) *SeriesTable {
	return newSeriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SeriesTable with assigned table prefix
func (a SeriesTable) WithPrefix(prefix string) *SeriesTable {
	return newSeriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SeriesTable with assigned table suffix
func (a SeriesTable) WithSuffix(suffix string) *SeriesTable {
	return newSeriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSeriesTable(schemaName, tableName, alias string) *SeriesTable {
	return &SeriesTable{
		seriesTable: newSeriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newSeriesTableImpl("", "excluded", ""),
	}
}

func newSeriesTableImpl(schemaName, tableName, alias string) seriesTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		NameColumn        = postgres.StringColumn("name")
		YearColumn        = postgres.IntegerColumn("year")
		ThemeColumn       = postgres.StringColumn("theme")
		ColorSchemeColumn = postgres.StringColumn("color_scheme")
		ImageURLColumn    = postgres.StringColumn("image_url")
		allColumns        = postgres.ColumnList{IDColumn, NameColumn, YearColumn, ThemeColumn, ColorSchemeColumn, ImageURLColumn}
		mutableColumns    = postgres.ColumnList{NameColumn, YearColumn, ThemeColumn, ColorSchemeColumn, ImageURLColumn}
	)

	return seriesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Year:        YearColumn,
		Theme:       ThemeColumn,
		ColorScheme: ColorSchemeColumn,
		ImageURL:    ImageURLColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
